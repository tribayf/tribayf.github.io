<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://tribayf.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tribayf.github.io/" rel="alternate" type="text/html" /><updated>2018-02-06T22:00:50-08:00</updated><id>https://tribayf.github.io/</id><title type="html">Tristan Bayfield</title><subtitle>A site to showcase some of my work.</subtitle><author><name>Tristan Bayfield</name></author><entry><title type="html">Exploring C++ Part 2: Functional Design Patterns (Functors)</title><link href="https://tribayf.github.io/blog/2018/02/functional-design-patterns" rel="alternate" type="text/html" title="Exploring C++ Part 2: Functional Design Patterns (Functors)" /><published>2018-02-03T00:00:00-08:00</published><updated>2018-02-03T00:00:00-08:00</updated><id>https://tribayf.github.io/blog/2018/02/functional-design-patterns</id><content type="html" xml:base="https://tribayf.github.io/blog/2018/02/functional-design-patterns">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A pattern that will begin to develop in this series is that I usually will not write specifically about C++ language features, simply because talking about features is boring. I will, however, cover them as used.&lt;/li&gt;
  &lt;li&gt;This post will cover translations of functional design patterns from Haskell to C++&lt;/li&gt;
  &lt;li&gt;Concepts covered
    &lt;ul&gt;
      &lt;li&gt;Functor&lt;/li&gt;
      &lt;li&gt;Applicative&lt;/li&gt;
      &lt;li&gt;Monad&lt;/li&gt;
      &lt;li&gt;Monoid&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A lot of this will be fairly abstract but my intention is to ground it as much as possible with explanation and examples. Where my intended audience is someone like myself who is new to functional programming.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;What/Why&lt;/li&gt;
  &lt;li&gt;Generalized code that deals with computational contexts aka ‘boxes’ and their composition into sequences&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;notation&quot;&gt;Notation&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Pretty much just going to use Haskell conventions and syntax for notation, but no experience with Haskell is required to follow this post&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;types&quot;&gt;Types&lt;/h3&gt;

&lt;p&gt;The Haskell convention is to use use lower case letters (&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;, …) to denote type variables, and capitalized words (&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass&lt;/code&gt;, …) to denote type names.&lt;/p&gt;

&lt;p&gt;The equivalent of type variables in C++ are template parameters, which, by convention, are notated with capital letters (&lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;, …), while type names are denoted by either lowercase or capitalized words (&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass&lt;/code&gt;, …) depending on style and context.&lt;/p&gt;

&lt;p&gt;We’ll use the Haskell conventions for notation, and C++ conventions in C++ code examples.&lt;/p&gt;

&lt;h3 id=&quot;function-notation&quot;&gt;Function Notation&lt;/h3&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;type-annotations&quot;&gt;Type annotations&lt;/h3&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;functor&quot;&gt;Functor&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The word Functor is commonly used to mean something else in C++ circles—usually function objects, which are callable instances of a class.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;struct Functor {
    template&amp;lt;typename T&amp;gt;
    T operator() (T a, T b) {
        T result = // do something with a, b, ...
        return result;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which can be used like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;Functor f;
auto x = f(a, b);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But here we mean functor in the mathematical sense. That is, an abstract data type &lt;code class=&quot;highlighter-rouge&quot;&gt;f a&lt;/code&gt; which provides the ability to map a function over its contents.&lt;/p&gt;

&lt;p&gt;Note functors are an abstraction. In practice they represent different things, but they are unified by a common behaviour.&lt;/p&gt;

&lt;p&gt;Think of &lt;code class=&quot;highlighter-rouge&quot;&gt;f a&lt;/code&gt; as a functor of type &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; containing value(s) of type &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Two functions:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;$fmap$&lt;/li&gt;
  &lt;li&gt;$&amp;lt;$$&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;functor-laws&quot;&gt;Functor Laws&lt;/h3&gt;

&lt;h2 id=&quot;in-c&quot;&gt;In C++&lt;/h2&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;algorithm&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;for_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Tristan Bayfield</name></author><summary type="html">Introduction</summary></entry><entry><title type="html">Exploring C++ Part 1: std::lower_bound</title><link href="https://tribayf.github.io/blog/2018/01/std-lower-bound" rel="alternate" type="text/html" title="Exploring C++ Part 1: std::lower_bound" /><published>2018-01-25T00:00:00-08:00</published><updated>2018-01-25T00:00:00-08:00</updated><id>https://tribayf.github.io/blog/2018/01/std-lower-bound</id><content type="html" xml:base="https://tribayf.github.io/blog/2018/01/std-lower-bound">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Binary search is one of the most widely used, and arguably the most important algorithm for any programmer to know. But, while conceptually straightforward, it can be &lt;a href=&quot;https://research.googleblog.com/2006/06/extra-extra-read-all-about-it-nearly.html&quot;&gt;surprisingly difficult&lt;/a&gt; to implement correctly. In addition, issues crop up in generalizing across different input types. C++ provides the ability to do so through its templating system. However, in using templated algorithms, one must be careful to respect any implicit constraints on template type parameters, as failing to do so can lead to code that is hard to debug.&lt;/p&gt;

&lt;p&gt;For these reasons, it can be instructive to take a closer look binary search, and why I have chosen to discuss it here (also because I’ve been watching a lot of Alexander Stepanov and Sean Parent lectures on YT lately 😅). The following considers &lt;code class=&quot;highlighter-rouge&quot;&gt;std::lower_bound&lt;/code&gt;, a particular flavour of binary search included in the C++ Standard Template Library. Let’s have a look!&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;One of four binary search algorithms included in the Standard Template Library (STL) since its first publication in 1994 &lt;a href=&quot;#stepanov1995standard&quot;&gt;[1]&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;std::lower_bound&lt;/code&gt; returns the position of the first element of a sorted range that does not precede the search key.&lt;/p&gt;

&lt;p&gt;The STL exposes two ways to call &lt;code class=&quot;highlighter-rouge&quot;&gt;std::lower_bound&lt;/code&gt;, which I’ll call version 1 and version 2, respectively:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lower_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lower_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compare&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Version 1 is a specialization of version 2, using the &lt;em&gt;less than&lt;/em&gt; operator (&lt;code class=&quot;highlighter-rouge&quot;&gt;operator&amp;lt;&lt;/code&gt;) to make comparisons between &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; and elements of the input range &lt;code class=&quot;highlighter-rouge&quot;&gt;[first, last)&lt;/code&gt;, while version 2 accepts a user-provided comparator.&lt;/p&gt;

&lt;p&gt;We can see a possible implementation below, which is based on the one given by Sean Parent in &lt;a href=&quot;#parent2016bettercode&quot;&gt;[2]&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iterator&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Requires ForwardIterator(I), and Compare partitions [first, last)
// with respect to the expression cmp(elem, value).
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lower_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compare&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// preconditions:
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//   - [first, last) is a valid range
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// postconditions:
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//   - the iterator returned is in the range [first, last]
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The algorithm works as per the expected behaviour of binary search: given a sorted range, it performs a comparison with the median element, discarding the half-range that does not include the search key, then continues inductively on remaining elements until termination. The value returned is an iterator pointing to the element that satisfies the search criteria, if found, otherwise &lt;code class=&quot;highlighter-rouge&quot;&gt;last&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that the convention of using &lt;a href=&quot;https://en.wikipedia.org/wiki/Interval_(mathematics)#Terminology&quot;&gt;half-open intervals&lt;/a&gt; to indicate ranges. Depending on whichever is more convenient, either a bounded range &lt;code class=&quot;highlighter-rouge&quot;&gt;[first, last)&lt;/code&gt;, or a counted range &lt;code class=&quot;highlighter-rouge&quot;&gt;[first, n)&lt;/code&gt; $\equiv$ &lt;code class=&quot;highlighter-rouge&quot;&gt;[first, first+n)&lt;/code&gt;, is used. The half-open notation expresses that &lt;code class=&quot;highlighter-rouge&quot;&gt;last&lt;/code&gt; $\equiv$ &lt;code class=&quot;highlighter-rouge&quot;&gt;first+n&lt;/code&gt; points to the first element past the last dereferenceable element of the range (as iterators, like pointers, are dereferenced to get the value they point to). Used as a token, &lt;code class=&quot;highlighter-rouge&quot;&gt;last&lt;/code&gt; safely denotes the end of a range without being required to point to valid memory, but as such, it should never be dereferenced. When returned from an algorithm, &lt;code class=&quot;highlighter-rouge&quot;&gt;last&lt;/code&gt; is interpreted as a negative result.&lt;/p&gt;

&lt;p&gt;Another point to consider is that the C++ standard does not require that compilers implement &lt;a href=&quot;https://en.wikipedia.org/wiki/Tail_call&quot;&gt;tail-call&lt;/a&gt; optimization. As a result, algorithms implemented in C++ tend to use loops rather than recurrence in order to avoid bottoming out the call-stack.&lt;/p&gt;

&lt;p&gt;Now that we have our algorithm, we can exercise it like so:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &quot;lower_bound.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// extra parens disambiguate call to lower_bound
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;not found!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which gives the result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7, 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, our call to &lt;code class=&quot;highlighter-rouge&quot;&gt;lower_bound&lt;/code&gt; returned an iterator pointing to the 7th element, which has a value of 4. This is indeed the first element that does not precede 4 in the range that we supplied.&lt;/p&gt;

&lt;p&gt;To further illustrate the algorithm’s behaviour, suppose that we run the it again with all the 4’s of the input range changed to 5’s, and with the search key left unchanged. We would again receive an iterator pointing to the 7th element, which would still be the first element of the range that does not precede a value of 4, but it would instead have a value of 5. If we subsequently run the algorithm with a search key greater than 6, we would receive an iterator pointing to &lt;code class=&quot;highlighter-rouge&quot;&gt;last&lt;/code&gt;. Such is the behaviour of &lt;code class=&quot;highlighter-rouge&quot;&gt;lower_bound&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(See this &lt;a href=&quot;/assets/img/blog/2018-01-25-std-lower-bound.png&quot; target=&quot;_blank&quot;&gt;graphic&lt;/a&gt; for a visual demonstration of how &lt;code class=&quot;highlighter-rouge&quot;&gt;lower_bound&lt;/code&gt; behaves with the first set of inputs.)&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;h3 id=&quot;type-requirements&quot;&gt;Type Requirements&lt;/h3&gt;

&lt;p&gt;As mentioned above, C++ enables generic programming through its templating system. Templatizing an algorithm increases its applicability across a variety of input types, while introducing an extra burden on callers who must be careful to respect any implicit requirements on template type parameters. Failure to do so can lead to crashes, undefined behaviour, or cryptic compile-time errors.&lt;/p&gt;

&lt;p&gt;Our case is no exception. For our algorithm to behave correctly, it is required that&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Template type parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; is a model of &lt;a href=&quot;http://en.cppreference.com/w/cpp/concept/ForwardIterator&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ForwardIterator&lt;/code&gt;&lt;/a&gt;, and&lt;/li&gt;
  &lt;li&gt;The expression &lt;code class=&quot;highlighter-rouge&quot;&gt;element &amp;lt; value&lt;/code&gt; is valid for all elements of the input range (version 1), or the template type parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;Compare&lt;/code&gt; is a binary predicate where &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp(element, value)&lt;/code&gt; forms a partition of the range &lt;code class=&quot;highlighter-rouge&quot;&gt;[first, last)&lt;/code&gt; (version 2).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first requirement states that &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; is a type of iterator with the ability to be incremented forward, without invalidating any copies made prior to incrementing (known as the &lt;a href=&quot;http://en.cppreference.com/w/cpp/concept/ForwardIterator#Multipass_guarantee&quot;&gt;multipass guarantee&lt;/a&gt; where for instances &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; it is the case that &lt;code class=&quot;highlighter-rouge&quot;&gt;a == b&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;++a == ++b&lt;/code&gt;, when both &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; point to the same element), and that elements may be both read from and written to via the iterator. For our purposes, we need only to read from instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As for the second requirement, up until now, I have been using &lt;em&gt;precedes&lt;/em&gt; where I might have been using &lt;em&gt;less than&lt;/em&gt;. This is true for version 1, which actually satisfies a stricter requirement. However, all we really need is something that defines a partition on the input range, where every element that &lt;em&gt;precedes&lt;/em&gt; the search key succeeds in the comparison, while every other element fails—giving us our partition. It is sufficient to use &lt;em&gt;precedes&lt;/em&gt;, indicating that there is at least a &lt;a href=&quot;https://en.wikipedia.org/wiki/Partially_ordered_set&quot;&gt;&lt;em&gt;partial ordering&lt;/em&gt;&lt;/a&gt; of the input range. Furthermore, version 2 does not even require that the value-type of &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; be the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;, as we’ll soon see.&lt;/p&gt;

&lt;p&gt;Originally, &lt;code class=&quot;highlighter-rouge&quot;&gt;Compare&lt;/code&gt; was required to define a &lt;a href=&quot;https://en.wikipedia.org/wiki/Weak_ordering#Strict_weak_orderings&quot;&gt;&lt;em&gt;strict weak order&lt;/em&gt;&lt;/a&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;[first, last)&lt;/code&gt;, but it was later pointed out that this requirement is stronger than is needed &lt;a href=&quot;#lgw270&quot;&gt;[3]&lt;/a&gt;. A strict weak order requires that the arguments to &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt; be of the same type (as in &lt;code class=&quot;highlighter-rouge&quot;&gt;ValueType(I) == T&lt;/code&gt;), but the applicability of &lt;code class=&quot;highlighter-rouge&quot;&gt;std::lower_bound&lt;/code&gt; can be made even greater by allowing &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt; to merely define a partition. This way &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt;, together with &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;, can be thought of as a unary predicate $p(x) \equiv cmp(x, value)$ indicating subset membership.&lt;/p&gt;

&lt;p&gt;The weaker requirement enables heterogeneous comparison between &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; and the elements of &lt;code class=&quot;highlighter-rouge&quot;&gt;[first, last)&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;Compare&lt;/code&gt; is potentially overloaded on different types:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi_comp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A simpler example given in &lt;a href=&quot;#lgw270&quot;&gt;[3]&lt;/a&gt; shows how a collection of records may be searched by defining &lt;code class=&quot;highlighter-rouge&quot;&gt;Compare&lt;/code&gt; as such:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_comp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In general, we can always supply arguments that satisfy stricter requirements than those specified. For example, in the above &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function, a vector of integers is given to &lt;code class=&quot;highlighter-rouge&quot;&gt;lower_bound&lt;/code&gt;, together with an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;std::less&amp;lt;int&amp;gt;&lt;/code&gt; (equivalent to calling version 1), and a search key of 4. Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;std::less&amp;lt;int&amp;gt;&lt;/code&gt; defines a &lt;a href=&quot;https://en.wikipedia.org/wiki/Total_order&quot;&gt;&lt;em&gt;total order&lt;/em&gt;&lt;/a&gt; in which any two elements of the range can be compared with each other, which exceeds even the requirements of a strict weak order (see &lt;a href=&quot;https://en.wikipedia.org/wiki/Order_theory&quot;&gt;order theory&lt;/a&gt; for further details).&lt;/p&gt;

&lt;h3 id=&quot;complexity&quot;&gt;Complexity&lt;/h3&gt;

&lt;p&gt;A characteristic of binary search is that it executes in at most $\lceil log_2(n) \rceil$ comparisons per execution. There is no early termination in &lt;code class=&quot;highlighter-rouge&quot;&gt;std::lower_bound&lt;/code&gt;, however, which terminates in exactly $\lceil log_2(n) \rceil$ iterations. Intuitively, this makes sense because the algorithm searches for the first of a potential range of matches.&lt;/p&gt;

&lt;p&gt;It should also be noted that the behaviour of &lt;a href=&quot;http://en.cppreference.com/w/cpp/iterator/next&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt;&lt;/a&gt; depends on the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt;. As stated above, &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; must at least satisfy the requirements of &lt;code class=&quot;highlighter-rouge&quot;&gt;ForwardIterator&lt;/code&gt;. When &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; additionally satisfies the requirements of &lt;a href=&quot;http://en.cppreference.com/w/cpp/concept/RandomAccessIterator&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RandomAccessIterator&lt;/code&gt;&lt;/a&gt;, such as raw pointers do, &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; can run in constant time, otherwise it runs in linear time.&lt;/p&gt;

&lt;h3 id=&quot;invariants&quot;&gt;Invariants&lt;/h3&gt;

&lt;p&gt;There are two invariants that contribute to proving the algorithm will both terminate and produce a correct result:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The value of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is nonnegative and strictly decreasing.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Proof&lt;/strong&gt;: Given the range &lt;code class=&quot;highlighter-rouge&quot;&gt;[first, last)&lt;/code&gt; is initially valid, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is initialized to the nonnegative value $distance(first, last) \equiv last - first$. In each iteration of the while-loop, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is reduced by either $h = \lfloor n/2 \rfloor$ or $h + 1 = \lfloor n/2 \rfloor + 1$, but is not modified in any other way, so its value is strictly decreasing. Next, assume that in some iteration $i$, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is made negative. The most that &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; can can be reduced by, in any iteration, is $\lfloor n/2 \rfloor + 1$. Thus, we have that, at the start of the $(i+1)th$ iteration, $n_{i+1} = n_{i} - \lfloor n_{i}/2 \rfloor - 1 &amp;lt; 0 \Leftrightarrow n_{i} &amp;lt; 0$, which is a contradiction (recalling that $n_i$ cannot be zero because the loop would have terminated before starting another iteration). That is, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; can only be made &lt;em&gt;more&lt;/em&gt; negative when it was &lt;em&gt;already&lt;/em&gt; negative to begin with, which necessarily means that the algorithm was supplied with an invalid range. $\Box$&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The subrange &lt;code class=&quot;highlighter-rouge&quot;&gt;[first, n)&lt;/code&gt; is valid as per the expected behaviour of a binary search algorithm.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Proof&lt;/strong&gt;: Following from the first invariant, the length of the range &lt;code class=&quot;highlighter-rouge&quot;&gt;[first, n)&lt;/code&gt; cannot exceed the length of the initial range &lt;code class=&quot;highlighter-rouge&quot;&gt;[first, last)&lt;/code&gt;, or become negative. In each iteration, the median element at position $m = first + h = first + \lfloor n/2 \rfloor$ is chosen for the comparison with &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;. In the case that the comparison fails, the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is reduced by $\lfloor n/2 \rfloor$, selecting the left subrange. Conversely, when the comparison succeeds, &lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; is moved to the right of &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; by one place, and &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is reduced by $\lfloor n/2 \rfloor + 1$, selecting the right subrange. (Note that in either case &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; is excluded from the new subrange, as it has already been compared against.) The process proceeds inductively until &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is reduced to zero and the loop is exited. Thus &lt;code class=&quot;highlighter-rouge&quot;&gt;[first, n)&lt;/code&gt; is valid as per the expected behaviour of binary search. $\Box$&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;termination&quot;&gt;Termination&lt;/h3&gt;

&lt;p&gt;Termination follows from the first invariant. In each iteration, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is reduced by at most $h + 1 = \lfloor n/2 \rfloor + 1$. It is then by the integer division of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; that it is guaranteed to eventually reach a value of zero, causing the loop to terminate (i.e. no such guarantee holds when &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; stores a floating-point value).&lt;/p&gt;

&lt;h3 id=&quot;correctness&quot;&gt;Correctness&lt;/h3&gt;

&lt;p&gt;To show correctness, it needs to be shown that, upon termination, &lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; will either point to the first element that &lt;em&gt;does not precede&lt;/em&gt; (&lt;em&gt;is not less than&lt;/em&gt;) &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;last&lt;/code&gt;. Assuming valid input arguments, the correctness of the algorithm follows from the second invariant.&lt;/p&gt;

&lt;p&gt;For any iteration, the right subrange is selected when &lt;code class=&quot;highlighter-rouge&quot;&gt;*m&lt;/code&gt; &lt;em&gt;precedes&lt;/em&gt; (&lt;em&gt;is less than&lt;/em&gt;) &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; (i.e. the comparison succeeds). In this case, the position of &lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; is moved to the right of &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; by one place because we know that all the elements up to and including &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; can be discarded. Whether the new element pointed to by &lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; precedes &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;, however, remains to be shown in a subsequent iteration. We may also say that when this case is true in one or more iterations, there is at least one element of the range that precedes &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Conversely, the left subrange is selected when &lt;code class=&quot;highlighter-rouge&quot;&gt;*m&lt;/code&gt; &lt;em&gt;does not precede&lt;/em&gt; (&lt;em&gt;is not less than&lt;/em&gt;) &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; (i.e. the comparison fails). In this case, the position of &lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; remains unchanged, but because we know that all elements from &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; onward do not precede &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;, they can be discarded. We may also say that when this case is true in one or more iterations, it cannot be that &lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; equals &lt;code class=&quot;highlighter-rouge&quot;&gt;last&lt;/code&gt; upon termination—that is, the algorithm will not return a negative result.&lt;/p&gt;

&lt;p&gt;Thus, &lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; moves right only when it is known that all elements up to and including &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; precede &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;. By induction we can infer that, upon termination, &lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; will point to either first element that &lt;em&gt;does not precede&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;last&lt;/code&gt;. We can also note the two extreme cases in which &lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; remains unchanged for the duration of the algorithm (no element preceded &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;), and &lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; equals &lt;code class=&quot;highlighter-rouge&quot;&gt;last&lt;/code&gt; upon termination (all elements preceded &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;subtle-pitfalls&quot;&gt;Subtle Pitfalls&lt;/h3&gt;

&lt;p&gt;We have so far looked at the issues regarding requirements on template type parameters, but we have yet to discuss two more rather innocuous places wherein it is easy to introduce bugs.&lt;/p&gt;

&lt;p&gt;First is a subtlety in our book keeping with respect to discarding elements after each comparison. For any iteration, we can consider that &lt;code class=&quot;highlighter-rouge&quot;&gt;[first, n) = [first, m)&lt;/code&gt; $\cup$ &lt;code class=&quot;highlighter-rouge&quot;&gt;[m, n)&lt;/code&gt; is the union of two halves about the median element &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;. We must be sure to discard &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; after each comparison, not only because it has already been compared against, but because failing to do so can result in a failure to terminate. Consider the scenario where &lt;code class=&quot;highlighter-rouge&quot;&gt;n = 1&lt;/code&gt; and the comparison succeeds. Here, we would subtract &lt;code class=&quot;highlighter-rouge&quot;&gt;h = 0&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; (as opposed to &lt;code class=&quot;highlighter-rouge&quot;&gt;h + 1 = 1&lt;/code&gt;), reflecting that &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; was not discarded. This produces an infinite loop, as &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; would never reach zero. Discarding &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; ensures that this problem is avoided.&lt;/p&gt;

&lt;p&gt;Finally, some implementations might have &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; set by &lt;code class=&quot;highlighter-rouge&quot;&gt;(first + last)/2&lt;/code&gt;. The problem is that this operation can potentially lead to integer overflow, which may only occur in rare circumstances. In a correct implementation, would have &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; equivalently set by &lt;code class=&quot;highlighter-rouge&quot;&gt;first + (last - first)/2&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post I discussed the issues regarding implementing and using &lt;code class=&quot;highlighter-rouge&quot;&gt;std::lower_bound&lt;/code&gt; in C++. Users of templated code must be careful to respect constraints on template type parameters. Further, it is the nature of working with C++ that close attention must be paid to book keeping. All of this contributes to avoiding potentially hard to find bugs. C++ is known as a dangerous language because it affords programmers the freedom to perpetrate all manor of heinous atrocities. A corollary, however, is that C++ programmers also have the ability to generate code that is fast and efficient—and safe, so long as sufficient care is taken.&lt;/p&gt;

&lt;p&gt;I have tried my best to make the information herein correct, and understandable for most people with some knowledge in programming C++. If you have any questions, comments, or corrections, please feel free to post a comment below. And thanks for reading!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;table class=&quot;bibliography&quot;&gt;&lt;tr&gt;
  
  
  
  &lt;th&gt;[1]&lt;/th&gt;
  &lt;td&gt;&lt;p&gt;&lt;span id=&quot;stepanov1995standard&quot;&gt;A. Stepanov and M. Lee, &lt;i&gt;The standard template library&lt;/i&gt;. Hewlett Packard Laboratories 1501 Page Mill Road, Palo Alto, CA 94304, 1995. &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;

&lt;/tr&gt;
&lt;tr&gt;
  
  
  
  &lt;th&gt;[2]&lt;/th&gt;
  &lt;td&gt;&lt;p&gt;&lt;span id=&quot;parent2016bettercode&quot;&gt;S. Parent, “Better Code.” code::dive 2016 [Online]. Available at: &lt;a href=&quot;https://youtu.be/cK_kftBNgBc&quot;&gt;https://youtu.be/cK_kftBNgBc&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;

&lt;/tr&gt;
&lt;tr&gt;
  
  
  
  &lt;th&gt;[3]&lt;/th&gt;
  &lt;td&gt;&lt;p&gt;&lt;span id=&quot;lgw270&quot;&gt;M. Austern, “LWG Issue 270. Binary search requirements overly strict.” [Online]. Available at: &lt;a href=&quot;https://cplusplus.github.io/LWG/issue270&quot;&gt;https://cplusplus.github.io/LWG/issue270&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;

&lt;/tr&gt;&lt;/table&gt;</content><author><name>Tristan Bayfield</name></author><summary type="html">Introduction</summary></entry></feed>